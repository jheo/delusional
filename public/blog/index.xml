<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on jheo.io</title>
    <link>https://jheo.io/blog/</link>
    <description>Recent content in Blogs on jheo.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 27 Jul 2021 00:04:36 +0900</lastBuildDate><atom:link href="https://jheo.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>레디스를 활용한 스케일아웃 레시피</title>
      <link>https://jheo.io/blog/scale-out-with-redis/</link>
      <pubDate>Tue, 27 Jul 2021 00:04:36 +0900</pubDate>
      
      <guid>https://jheo.io/blog/scale-out-with-redis/</guid>
      <description>제가 예전에 수행했던 어떤 프로젝트는 웨어러블 장비를 통해 수집된 심전도 데이터를 안드로이드 기기로 전송하여 24시간에서 72시간 정도 취합한 뒤 서버로 업로드 하면 별도의 딥러닝 분석 모듈을 통해서 사용자의 심장 건강에 문제가 있는지 체크해주는 애플리케이션들을 만드는 프로젝트 였습니다. 심전도, 웨어러블, 딥러닝 등 뭔가 최신기술의 집약체를 나타내는 듯한 단어들이 많이 나온 것에 비해서 전체적인 아키텍처는 단순한 편이었습니다. 웨어러블 장비와 안드로이드 장비간의 연결은 블루투스, 안드로이드 장비는 수집한 데이터를 Rest API와 Multipart Request를 이용하여 서버에 업로드 하고, 서버는 이 데이터를 일부 정제하여 분석 서버에 넘기고, 분석 서버는 쉘 프로그램을 수행하여 분석을 수행하고 그 결과를 다시 DB에 집어넣습니다.</description>
    </item>
    
    <item>
      <title>루비에서 쿠버네티스까지</title>
      <link>https://jheo.io/blog/from-ruby-to-k8s/</link>
      <pubDate>Tue, 27 Jul 2021 00:04:36 +0900</pubDate>
      
      <guid>https://jheo.io/blog/from-ruby-to-k8s/</guid>
      <description>2005년 6월 2일, David Heinemeier Hansson이라는 이름의 덴마크 출신 개발자가 브라질에서 열린 컨퍼런스에서 하나의 발표를 하게 됩니다. 발표 주제는 자신이 직접 개발한 프레임워크를 이용해서 블로그를 만드는 시연이었습니다. 이 발표에서 DHH는 비어있는 디렉터리에서부터 시작하여 단위 테스트코드를 포함하여 글 작성, 수정, 코멘트 기능이 완비된 블로그를 만드는 시연을 15분 만에 실수 없이 매끄럽게 끝냈습니다. 이 발표는 당시에 어마어마한 화제가 되었기 때문에 당시 업계에서 이미 일하고 계셨던 분들이나 관련 공부를 하고 계셨던 분들이라면 다들 한 번쯤 &amp;lsquo;How to build a blog engine in 15 minutes with Ruby on Rails&amp;rsquo;라는 영상을 보셨을 겁니다.</description>
    </item>
    
    <item>
      <title>아주 간단한 CRUD 애플리케이션 만들기</title>
      <link>https://jheo.io/blog/develop-basic-crud-app/</link>
      <pubDate>Tue, 27 Jul 2021 00:04:36 +0900</pubDate>
      
      <guid>https://jheo.io/blog/develop-basic-crud-app/</guid>
      <description>서론 지난 여름, 저는 부서로부터 기묘한 업무지시를 받았습니다. 간단한 CRUD 서버를 하나 만들라는 것입니다. 익히 아시는 것 처럼 CRUD는 Create, Read, Update, Delete의 약자로 뭔가를 저장하고 읽고 수정하고 지우는 작업을 의미합니다. 저희가 일을 하면서 만드는 정보시스템의 가장 기본이 되는 동작이기 때문에 보통 CRUD = 가장 기초적이고 쉬운 동작 이라는 의미로 쓰일 때가 많습니다. &amp;ldquo;일단 인턴들 CRUD 하나씩 개발해보게 하시죠&amp;rdquo; &amp;ldquo;그 기능이요? 기껏해야 CRUD 정도 난이도 입니다.&amp;rdquo; &amp;ldquo;일단 CRUD 하나 짜보면서 견적을 내보시죠&amp;rdquo; 이런 식으로요.</description>
    </item>
    
    <item>
      <title>엔터프라이즈 안드로이드 애플리케이션 개발하기</title>
      <link>https://jheo.io/blog/enterprise-android-dev/</link>
      <pubDate>Tue, 27 Jul 2021 00:04:36 +0900</pubDate>
      
      <guid>https://jheo.io/blog/enterprise-android-dev/</guid>
      <description>스레드 걱정 없는 파일 저장소 만들기 안드로이드에서 기기의 저장소에 파일을 저장하는 방법은 일반적인 자바의 파일 저장과 완전히 동일합니다. 예를 들어서 &amp;lsquo;Hello, World!&amp;lsquo;라는 문자열을 파일로 저장하기 위해서는 다음과 같은 일반적인 코드를 사용하면 됩니다.
public void saveText(String text) { try { File file = new File(getFilesDir(), &amp;#34;test.txt&amp;#34;); FileWriter fw = new FileWriter(file); fw.write(text); fw.close(); } catch (IOException ie) { ie.printStackTrace(); } } 안드로이드 기기에서 앱이 사용하는 내부저장소(Internal Storage)의 루트 디렉토리를 가져오는 API인 getFilesDir() 메소드를 사용한 것 외에는 지극히 평범한 자바의 File I/O 코드입니다.</description>
    </item>
    
    <item>
      <title>처음보는 언어로 멀티 리전 기능 구현하기</title>
      <link>https://jheo.io/blog/implement-multi-region-with-strange-language/</link>
      <pubDate>Tue, 27 Jul 2021 00:04:36 +0900</pubDate>
      
      <guid>https://jheo.io/blog/implement-multi-region-with-strange-language/</guid>
      <description>서론 지난 9월 미국 시애틀에 도착해서 약간의 적응과정을 거친 후 제가 받은 첫 번째 업무는 이쪽 팀에서 만들고 있는 IMS라는 시스템에 멀티 리전(Multi region) 기능을 추가하라는 것이었습니다. 그 전의 적응 기간 동안 지라, 슬랙, 줌, 깃헙을 활용하는 일련의 프로세스에 익숙해질 기회가 있었는데, 그 적용 수준이나 적극성의 차이는 있을지 몰라도 한국에서도 이미 오랫동안 경험했던 업무 환경이었기에 큰 어려움을 느끼지 않았었습니다. 하지만 새로운 기능을 개발해서 기존 시스템에 추가하라는 구체적이고 실질적인 업무를 받고 나서, 막상 코드를 작성하려고 익숙한 에디터를 켰을 때는 친숙하고 분명한 느낌 보다는 뭔가 생소하고 막막한 느낌이 크게 들었습니다.</description>
    </item>
    
    <item>
      <title>클라우드 네이티브 프로그래밍 101</title>
      <link>https://jheo.io/blog/cloud-native-programming-101/</link>
      <pubDate>Tue, 27 Jul 2021 00:04:36 +0900</pubDate>
      
      <guid>https://jheo.io/blog/cloud-native-programming-101/</guid>
      <description>클라우드 네이티브 프로그래밍이란 클라우드 환경을 위한 프로그램을 만드는 것을 의미합니다. 다만, 단순히 클라우드 환경에 배포할 수 있는 프로그램의 개발만을 고려하는 것이 아니라 클라우드 환경의 특성에 맞게 동작할 수 있는, 클라우드에서 제공하는 것들을 적극적으로 활용하는 프로그램을 만드는 것을 의미한다고 생각하면 좋을 것 같습니다.
클라우드 컴퓨팅은 개발자의 관점에서는 무한할 정도로 많은 자원들을 가진 클라우드 인프라에서 목적에 맞는 기능을 가진 자원을 필요한 만큼 할당받아서 사용하는 것을 가능하게 했습니다. 그래서 과거에는 직접 물리적인 서버를 들고 가서 랙에 설치하고 랜선을 꽂아야 했던 서버 증설의 과정이 클릭 몇 번으로, 혹은 클릭도 없이 자동으로 이루어질만큼 단순해졌고 그 반대의 경우도 비슷하게 단순해졌습니다.</description>
    </item>
    
    <item>
      <title>팀으로 일하는 것과 팀을 위해 일하는 것</title>
      <link>https://jheo.io/blog/work-as-a-team/</link>
      <pubDate>Tue, 27 Jul 2021 00:04:36 +0900</pubDate>
      
      <guid>https://jheo.io/blog/work-as-a-team/</guid>
      <description>서론 제가 미국에 파견을 온 지 얼마 지나지 않아서의 일입니다. 이쪽 사람들하고 이야기하다가 제가 옛날에는 일주일에 100시간씩 일하던 시절이 있었음을 고백한 적이 있었는데, 여기 사람들은 그 사실에 적지 않은 충격을 받았던 것 같았습니다. 사실 미국 개발자들은 워라밸이 황금 밸런스라던지, 신입사원도 억대 연봉을 받는다던지, 자율성을 충분히 보장받고 커리어 패스도 완벽하게 만들어나가고 등등의 모든 선진적인 문화를 다 가지고 있다는 환상이 있을 수도 있지만, 그러기에는 너티독의 끔찍한 크런치 문화에 대한 비판이라든지 아마존의 살인적인 업무 강도라든지 자기 몫만큼 일하면 해고당하는 넷플릭스에 대한 소문 등을 너무 많이 들었던 저는 이쪽 사람들이 충격을 받았다는 사실에 충격을 받았습니다.</description>
    </item>
    
  </channel>
</rss>
